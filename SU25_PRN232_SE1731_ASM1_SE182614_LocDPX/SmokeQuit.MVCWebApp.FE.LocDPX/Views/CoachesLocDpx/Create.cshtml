@{
    ViewData["Title"] = "Create Coach";
}

<h1>Create New Coach</h1>

<hr />
<div class="row">
    <div class="col-md-6">
        <form id="createCoachForm">
            <div id="validationSummary" class="text-danger" style="display: none;"></div>

            <div class="form-group mb-3">
                <label for="FullName" class="control-label">Full Name</label>
                <input id="FullName" name="FullName" class="form-control" placeholder="Enter full name" required />
                <span id="FullName-error" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label for="Email" class="control-label">Email</label>
                <input id="Email" name="Email" class="form-control" type="email" placeholder="Enter email address" required />
                <span id="Email-error" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label for="PhoneNumber" class="control-label">Phone Number</label>
                <input id="PhoneNumber" name="PhoneNumber" class="form-control" placeholder="Enter phone number" />
                <span id="PhoneNumber-error" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label for="Bio" class="control-label">Bio</label>
                <textarea id="Bio" name="Bio" class="form-control" rows="4" placeholder="Enter coach biography..."></textarea>
                <span id="Bio-error" class="text-danger"></span>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary" id="submitBtn">
                    <span id="submitSpinner" class="spinner-border spinner-border-sm" style="display: none;" role="status" aria-hidden="true"></span>
                    Create
                </button>
                <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('#createCoachForm').submit(function(e) {
                e.preventDefault();
                clearErrors();

                const formData = {
                    fullName: $('#FullName').val(),
                    email: $('#Email').val(),
                    phoneNumber: $('#PhoneNumber').val(),
                    bio: $('#Bio').val()
                };

                // Simple client-side validation (no email regex)
                if (!validateForm(formData)) {
                    return;
                }

                setLoading(true);

                $.ajax({
                    url: 'https://localhost:7260/api/CoachLocDpx',
                    type: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + getCookie('TokenString'),
                        'Content-Type': 'application/json'
                    },
                    data: JSON.stringify(formData),
                    success: function(response) {
                        setLoading(false);
                        showSuccess('Coach created successfully!');
                        setTimeout(function() {
                            window.location.href = '/CoachesLocDpx';
                        }, 1500);
                    },
                    error: function(xhr, status, error) {
                        setLoading(false);
                        handleError(xhr);
                    }
                });
            });
        });

        function validateForm(data) {
            let isValid = true;

            // Only validate required fields and length - NO EMAIL FORMAT CHECK
            if (!data.fullName || data.fullName.trim().length === 0) {
                showFieldError('FullName', 'Full Name is required');
                isValid = false;
            } else if (data.fullName.length > 100) {
                showFieldError('FullName', 'Full Name cannot exceed 100 characters');
                isValid = false;
            }

            // Email - only check if required and length (server will validate format)
            if (!data.email || data.email.trim().length === 0) {
                showFieldError('Email', 'Email is required');
                isValid = false;
            } else if (data.email.length > 100) {
                showFieldError('Email', 'Email cannot exceed 100 characters');
                isValid = false;
            }

            // Phone Number - only length validation
            if (data.phoneNumber && data.phoneNumber.length > 20) {
                showFieldError('PhoneNumber', 'Phone number cannot exceed 20 characters');
                isValid = false;
            }

            // Bio - only length validation
            if (data.bio && data.bio.length > 500) {
                showFieldError('Bio', 'Bio cannot exceed 500 characters');
                isValid = false;
            }

            return isValid;
        }

        function showFieldError(fieldName, message) {
            document.getElementById(fieldName + '-error').textContent = message;
        }

        function clearErrors() {
            const errorElements = document.querySelectorAll('.text-danger');
            errorElements.forEach(function(el) {
                el.textContent = '';
            });
            document.getElementById('validationSummary').style.display = 'none';
        }

        function setLoading(loading) {
            const submitBtn = document.getElementById('submitBtn');
            const spinner = document.getElementById('submitSpinner');

            if (loading) {
                submitBtn.disabled = true;
                spinner.style.display = 'inline-block';
            } else {
                submitBtn.disabled = false;
                spinner.style.display = 'none';
            }
        }

        function handleError(xhr) {
            if (xhr.status === 409) {
                showFieldError('Email', 'A coach with this email already exists.');
            } else if (xhr.status === 400) {
                // Server validation errors (including email format from data annotations)
                try {
                    const response = JSON.parse(xhr.responseText);
                    if (response.errors) {
                        // Display server validation errors
                        for (const field in response.errors) {
                            showFieldError(field, response.errors[field][0]);
                        }
                    } else {
                        showError('Invalid data submitted. Please check your input.');
                    }
                } catch (e) {
                    showError('Invalid data submitted. Please check your input.');
                }
            } else {
                showError('An error occurred while creating the coach. Please try again.');
            }
        }

        function showSuccess(message) {
            alert(message);
        }

        function showError(message) {
            const summaryElement = document.getElementById('validationSummary');
            summaryElement.textContent = message;
            summaryElement.style.display = 'block';
        }

        function getCookie(name) {
            const value = '; ' + document.cookie;
            const parts = value.split('; ' + name + '=');
            if (parts.length === 2) return parts.pop().split(';').shift();
            return '';
        }
    </script>
}